{"ast":null,"code":"import setAuthorizationToken from \"../../Utils/setAuthorization\";\nimport jwt from \"jsonwebtoken\";\nimport axios from \"axios\";\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, SIGNOUT_USER, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, SET_CURRENT_USER, USER_DETAILS_RESET } from \"../Constant/AuthConstant\";\nimport { ORDER_LIST_MY_RESET } from \"../Constant/OrderConstant\"; //Login Action\n\nexport const login = (email, password) => {\n  return function (dispatch) {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n      payload: true\n    });\n    let OPTIONS = {\n      url: `http://localhost:5000/login/`,\n      method: \"POST\",\n      data: {\n        email: email,\n        password: password\n      },\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    };\n    axios(OPTIONS).then(res => {\n      const msg = res.data.msg;\n\n      if (msg === \"Success\") {\n        const etoken = res.data.token;\n        localStorage.setItem(\"etoken\", etoken);\n        setAuthorizationToken(etoken); // console.log(etoken);\n\n        dispatch(setCurrentUser(jwt.decode(etoken)));\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: msg,\n          isSigninIn: true\n        });\n      } else {\n        dispatch({\n          type: USER_LOGIN_FAIL,\n          payload: msg,\n          isSigninIn: false\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: USER_LOGIN_FAIL,\n        loading: false,\n        payload: error.message\n      });\n    });\n  };\n}; // logout Action\n\nexport const logout = () => {\n  return function (dispatch) {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n      payload: true\n    });\n    localStorage.removeItem(\"etoken\");\n    setAuthorizationToken(false);\n    dispatch(setCurrentUser({}));\n    dispatch({\n      type: USER_DETAILS_RESET\n    });\n    dispatch({\n      type: ORDER_LIST_MY_RESET\n    });\n    dispatch({\n      type: SIGNOUT_USER,\n      payload: false\n    });\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      loading: false,\n      payload: \"\"\n    });\n    window.location.href = \"/\";\n  };\n}; // SET CURRENT USER ACTION\n\nexport const setCurrentUser = result => {\n  // console.log(result);\n  return {\n    type: SET_CURRENT_USER,\n    payload: result\n  };\n}; // User Register\n\nexport const register = (name, email, password, contact) => {\n  return function (dispatch) {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n      payload: true\n    });\n    let OPTIONS = {\n      url: `http://localhost:5000/signup`,\n      method: \"POST\",\n      data: {\n        name: name,\n        email: email,\n        contact: contact,\n        password: password\n      },\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    };\n    axios(OPTIONS).then(res => {\n      const msg = res.data.msg;\n\n      if (msg === \"Success\") {\n        dispatch({\n          type: USER_REGISTER_SUCCESS,\n          payload: msg,\n          isSigninIn: false\n        });\n      } else {\n        dispatch({\n          type: USER_REGISTER_FAIL,\n          payload: msg,\n          isSigninIn: false\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        loading: false,\n        payload: error.message\n      });\n    });\n  };\n}; // get user details\n\nexport const getUserDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const token = localStorage.getItem(\"etoken\");\n    console.log(token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"token\"\n      }\n    };\n    const {\n      data\n    } = await axios.get(`http://localhost:5000/find/${id}`, config);\n    console.log(data);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Update Action\n\nexport const updateUserProfile = (user, id) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const token = localStorage.getItem(\"etoken\");\n    console.log(token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"token\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`http://localhost:5000/update/${id}`, user, config);\n    console.log(data);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/master/Documents/herbalFinal/client/src/Redux/Action/AuthAction.js"],"names":["setAuthorizationToken","jwt","axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","SIGNOUT_USER","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","SET_CURRENT_USER","USER_DETAILS_RESET","ORDER_LIST_MY_RESET","login","email","password","dispatch","type","payload","OPTIONS","url","method","data","headers","then","res","msg","etoken","token","localStorage","setItem","setCurrentUser","decode","isSigninIn","catch","error","loading","message","logout","removeItem","window","location","href","result","register","name","contact","getUserDetails","id","getItem","console","log","config","Authorization","get","response","updateUserProfile","user","put"],"mappings":"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","sourcesContent":["import setAuthorizationToken from \"../../Utils/setAuthorization\";\nimport jwt from \"jsonwebtoken\";\nimport axios from \"axios\";\nimport {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  SIGNOUT_USER,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_UPDATE_PROFILE_FAIL,\n  SET_CURRENT_USER,\n  USER_DETAILS_RESET,\n} from \"../Constant/AuthConstant\";\nimport { ORDER_LIST_MY_RESET } from \"../Constant/OrderConstant\";\n\n//Login Action\nexport const login = (email, password) => {\n  return function (dispatch) {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n      payload: true,\n    });\n\n    let OPTIONS = {\n      url: `http://localhost:5000/login/`,\n      method: \"POST\",\n      data: {\n        email: email,\n        password: password,\n      },\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    };\n\n    axios(OPTIONS)\n      .then((res) => {\n        const msg = res.data.msg;\n        if (msg === \"Success\") {\n          const etoken = res.data.token;\n          localStorage.setItem(\"etoken\", etoken);\n          setAuthorizationToken(etoken);\n          // console.log(etoken);\n\n          dispatch(setCurrentUser(jwt.decode(etoken)));\n          dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: msg,\n            isSigninIn: true,\n          });\n        } else {\n          dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: msg,\n            isSigninIn: false,\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({\n          type: USER_LOGIN_FAIL,\n          loading: false,\n          payload: error.message,\n        });\n      });\n  };\n};\n\n// logout Action\nexport const logout = () => {\n  return function (dispatch) {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n      payload: true,\n    });\n    localStorage.removeItem(\"etoken\");\n    setAuthorizationToken(false);\n    dispatch(setCurrentUser({}));\n    dispatch({ type: USER_DETAILS_RESET });\n    dispatch({ type: ORDER_LIST_MY_RESET });\n    dispatch({\n      type: SIGNOUT_USER,\n      payload: false,\n    });\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      loading: false,\n      payload: \"\",\n    });\n    window.location.href = \"/\";\n  };\n};\n\n// SET CURRENT USER ACTION\nexport const setCurrentUser = (result) => {\n  // console.log(result);\n  return {\n    type: SET_CURRENT_USER,\n    payload: result,\n  };\n};\n\n// User Register\nexport const register = (name, email, password, contact) => {\n  return function (dispatch) {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n      payload: true,\n    });\n\n    let OPTIONS = {\n      url: `http://localhost:5000/signup`,\n      method: \"POST\",\n      data: {\n        name: name,\n        email: email,\n        contact: contact,\n        password: password,\n      },\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    };\n\n    axios(OPTIONS)\n      .then((res) => {\n        const msg = res.data.msg;\n        if (msg === \"Success\") {\n          dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: msg,\n            isSigninIn: false,\n          });\n        } else {\n          dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: msg,\n            isSigninIn: false,\n          });\n        }\n      })\n      .catch((error) => {\n        dispatch({\n          type: USER_REGISTER_FAIL,\n          loading: false,\n          payload: error.message,\n        });\n      });\n  };\n};\n\n// get user details\nexport const getUserDetails = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_DETAILS_REQUEST });\n\n    const token = localStorage.getItem(\"etoken\");\n    console.log(token);\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"token\",\n      },\n    };\n\n    const { data } = await axios.get(\n      `http://localhost:5000/find/${id}`,\n      config\n    );\n    console.log(data);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// Update Action\n\nexport const updateUserProfile = (user, id) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_UPDATE_PROFILE_REQUEST });\n\n    const token = localStorage.getItem(\"etoken\");\n    console.log(token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"token\",\n      },\n    };\n\n    const { data } = await axios.put(\n      `http://localhost:5000/update/${id}`,\n      user,\n      config\n    );\n    console.log(data);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}